{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dweeter A python module for messaging through the free dweet service. Dweet is a simple machine-to-machine (M2M) service from dweet.io . Installation pip install dweeter Usage >>> from dweeter import Dweeter >>> dwtr = Dweeter(\"YOUR MAILBOX\", \"YOUR KEY\") >>> dwtr.send_data({\"STRING DATA\": \"STRING VALUE\", \"INT DATA\": 100, \"FLOAT DATA\": 3.14, \"BOOL DATA\": True}) {'thing': '3e7cb39f82fb1ac29e40b935a3cbbaed', 'created': '2022-05-30T04:15:54.787Z', 'content': {'68fcbe24759c8aeb21633df279049eb441eb7c7bcb8b4645f206f55f659fd198': '3aef3ed5ce517e4da35874b765c989256adf568525d43f8da6c2bab602ec5934c667da430fc4e43705699e57ced03d20a270fef33bfc7d1cc2b4f00255c794f00497d29717499ec0c2296b8b52fbef6e015ac0be42de9c8fdfb5f85a5455412cc14bb40acb0f9eaeb606a027b2de1acf94c630f86b5eac56add50048cad47fe5f1b2a699088153e0bf8aa3247192badc'}, 'transaction': '342e85f2-c4dc-4831-a746-e45f50885092'} >>> dwtr.get_new_data() {'STRING DATA': 'STRING VALUE', 'INT DATA': 100, 'FLOAT DATA': 3.14, 'BOOL DATA': True, 'remote_time': '2022-05-30T04:15:49.000Z', 'created_time': '2022-05-30T04:15:54.787Z'}","title":"Home"},{"location":"#dweeter","text":"A python module for messaging through the free dweet service. Dweet is a simple machine-to-machine (M2M) service from dweet.io .","title":"dweeter"},{"location":"#installation","text":"pip install dweeter","title":"Installation"},{"location":"#usage","text":">>> from dweeter import Dweeter >>> dwtr = Dweeter(\"YOUR MAILBOX\", \"YOUR KEY\") >>> dwtr.send_data({\"STRING DATA\": \"STRING VALUE\", \"INT DATA\": 100, \"FLOAT DATA\": 3.14, \"BOOL DATA\": True}) {'thing': '3e7cb39f82fb1ac29e40b935a3cbbaed', 'created': '2022-05-30T04:15:54.787Z', 'content': {'68fcbe24759c8aeb21633df279049eb441eb7c7bcb8b4645f206f55f659fd198': '3aef3ed5ce517e4da35874b765c989256adf568525d43f8da6c2bab602ec5934c667da430fc4e43705699e57ced03d20a270fef33bfc7d1cc2b4f00255c794f00497d29717499ec0c2296b8b52fbef6e015ac0be42de9c8fdfb5f85a5455412cc14bb40acb0f9eaeb606a027b2de1acf94c630f86b5eac56add50048cad47fe5f1b2a699088153e0bf8aa3247192badc'}, 'transaction': '342e85f2-c4dc-4831-a746-e45f50885092'} >>> dwtr.get_new_data() {'STRING DATA': 'STRING VALUE', 'INT DATA': 100, 'FLOAT DATA': 3.14, 'BOOL DATA': True, 'remote_time': '2022-05-30T04:15:49.000Z', 'created_time': '2022-05-30T04:15:54.787Z'}","title":"Usage"},{"location":"api/","text":"API Documentation package dweeter A python module for messaging through the free dweet service. Author: Quan Lin License: MIT Classes DweeterError \u2014 Common base class for all non-exit exceptions. Dweeter \u2014 A class for messaging through the free dweet service. class dweeter. DweeterError ( ) Bases Exception BaseException Common base class for all non-exit exceptions. class dweeter. Dweeter ( mailbox='default mailbox' , key='default key' , debug=False ) A class for messaging through the free dweet service. Parameters mailbox (str) \u2014 A virtual mailbox through the free dweet service. key (str) \u2014 The key to the virtual mailbox. debug (bool, optional) \u2014 If it is True , exceptions will be printed. Otherwise exceptions will be swallowed silently. (default is False ) Attributes debug (bool) \u2014 If it is True , exceptions will be printed. Otherwise exceptions will be swallowed silently. get_new_data() \u2014 Receive the latest and new data_dict from the mailbox. latest (dict) \u2014 The latest received data dictionary. mailbox (str) \u2014 A virtual mailbox through the free dweet service. send_data(data_dict) \u2014 Send the data_dict to the mailbox. Notes With the same mailbox and a different key, it actually creates a different virtual mailbox. Methods get_new_data ( ) (dict) \u2014 Receive the latest and new data_dict from the mailbox. send_data ( data_dict ) (dict) \u2014 Send the data_dict to the mailbox. method send_data ( data_dict ) Send the data_dict to the mailbox. Parameters data_dict (dict) \u2014 The data dictionary to send to the mailbox. This dictionary must be json compatible. There are 2 keys reserved for data_dict. One is \"created_time\", the dweet service time. The other is \"remote_time\", the local time of the remote device. Returns (dict) The dweet transaction dict returned from dweet service. It should include the keys of 'thing', 'content', 'created' and 'transaction'. method get_new_data ( ) Receive the latest and new data_dict from the mailbox. Returns (dict) The latest and new data dictionary from the mailbox. None will be returned if the latest data_dict is old.","title":"API Documentation"},{"location":"api/#api-documentation","text":"package","title":"API Documentation"},{"location":"api/#dweeter","text":"A python module for messaging through the free dweet service. Author: Quan Lin License: MIT Classes DweeterError \u2014 Common base class for all non-exit exceptions. Dweeter \u2014 A class for messaging through the free dweet service. class","title":"dweeter"},{"location":"api/#dweeterdweetererror","text":"Bases Exception BaseException Common base class for all non-exit exceptions. class","title":"dweeter.DweeterError"},{"location":"api/#dweeterdweeter","text":"A class for messaging through the free dweet service. Parameters mailbox (str) \u2014 A virtual mailbox through the free dweet service. key (str) \u2014 The key to the virtual mailbox. debug (bool, optional) \u2014 If it is True , exceptions will be printed. Otherwise exceptions will be swallowed silently. (default is False ) Attributes debug (bool) \u2014 If it is True , exceptions will be printed. Otherwise exceptions will be swallowed silently. get_new_data() \u2014 Receive the latest and new data_dict from the mailbox. latest (dict) \u2014 The latest received data dictionary. mailbox (str) \u2014 A virtual mailbox through the free dweet service. send_data(data_dict) \u2014 Send the data_dict to the mailbox. Notes With the same mailbox and a different key, it actually creates a different virtual mailbox. Methods get_new_data ( ) (dict) \u2014 Receive the latest and new data_dict from the mailbox. send_data ( data_dict ) (dict) \u2014 Send the data_dict to the mailbox. method send_data ( data_dict ) Send the data_dict to the mailbox. Parameters data_dict (dict) \u2014 The data dictionary to send to the mailbox. This dictionary must be json compatible. There are 2 keys reserved for data_dict. One is \"created_time\", the dweet service time. The other is \"remote_time\", the local time of the remote device. Returns (dict) The dweet transaction dict returned from dweet service. It should include the keys of 'thing', 'content', 'created' and 'transaction'. method get_new_data ( ) Receive the latest and new data_dict from the mailbox. Returns (dict) The latest and new data dictionary from the mailbox. None will be returned if the latest data_dict is old.","title":"dweeter.Dweeter"}]}